{"name": "test_1_registration", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id='ember964']/div/div[1]/div[2]/div/div[3]/div[1]/span\"}\n  (Session info: chrome=111.0.5563.147)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x006FDCE3]\n\t(No symbol) [0x006939D1]\n\t(No symbol) [0x005A4DA8]\n\t(No symbol) [0x005D019F]\n\t(No symbol) [0x005D03AB]\n\t(No symbol) [0x005FEE62]\n\t(No symbol) [0x005EAF14]\n\t(No symbol) [0x005FD57C]\n\t(No symbol) [0x005EACC6]\n\t(No symbol) [0x005C6F68]\n\t(No symbol) [0x005C80CD]\n\tGetHandleVerifier [0x00973832+2506274]\n\tGetHandleVerifier [0x009A9794+2727300]\n\tGetHandleVerifier [0x009AE36C+2746716]\n\tGetHandleVerifier [0x007A6690+617600]\n\t(No symbol) [0x0069C712]\n\t(No symbol) [0x006A1FF8]\n\t(No symbol) [0x006A20DB]\n\t(No symbol) [0x006AC63B]\n\tBaseThreadInitThunk [0x75A77D49+25]\n\tRtlInitializeExceptionChain [0x76F4B74B+107]\n\tRtlClearBits [0x76F4B6CF+191]", "trace": "self = <main_test.AutoBuyMe testMethod=test_1_registration>\n\n    def test_1_registration(self):\n>       self.registration_test.test_registration()\n\nmain_test.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nregistration_test.py:22: in test_registration\n    self.click_element(Constants.XPATH_LOCATOR, Constants.REGISTRATION_BUTTON)\nbasePage.py:18: in click_element\n    self.driver.find_element(locator_type, value=locator_value).click()\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\autobuyme-Q3RDNKLf-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\autobuyme-Q3RDNKLf-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000218FFCD7AD0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x75A77D49+25]\\\\n\\\\tRtlInitializeExceptionChain [0x76F4B74B+107]\\\\n\\\\tRtlClearBits [0x76F4B6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@id='ember964']/div/div[1]/div[2]/div/div[3]/div[1]/span\"}\nE         (Session info: chrome=111.0.5563.147)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x006FDCE3]\nE       \t(No symbol) [0x006939D1]\nE       \t(No symbol) [0x005A4DA8]\nE       \t(No symbol) [0x005D019F]\nE       \t(No symbol) [0x005D03AB]\nE       \t(No symbol) [0x005FEE62]\nE       \t(No symbol) [0x005EAF14]\nE       \t(No symbol) [0x005FD57C]\nE       \t(No symbol) [0x005EACC6]\nE       \t(No symbol) [0x005C6F68]\nE       \t(No symbol) [0x005C80CD]\nE       \tGetHandleVerifier [0x00973832+2506274]\nE       \tGetHandleVerifier [0x009A9794+2727300]\nE       \tGetHandleVerifier [0x009AE36C+2746716]\nE       \tGetHandleVerifier [0x007A6690+617600]\nE       \t(No symbol) [0x0069C712]\nE       \t(No symbol) [0x006A1FF8]\nE       \t(No symbol) [0x006A20DB]\nE       \t(No symbol) [0x006AC63B]\nE       \tBaseThreadInitThunk [0x75A77D49+25]\nE       \tRtlInitializeExceptionChain [0x76F4B74B+107]\nE       \tRtlClearBits [0x76F4B6CF+191]\n\n..\\..\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\autobuyme-Q3RDNKLf-py3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException"}, "attachments": [{"name": "Screenshot", "source": "300013e5-1035-4b74-ac56-0a28bd15b916-attachment.png", "type": "image/png"}], "start": 1681581744454, "stop": 1681581762051, "uuid": "c9afe6b9-e094-4131-ad23-e2ceb6590a9f", "historyId": "2988cb81a9694011ba8fe722e0619880", "testCaseId": "5e0fae548e4bb0d66717d480cc3535b1", "fullName": "main_test.AutoBuyMe#test_1_registration", "labels": [{"name": "suite", "value": "main_test"}, {"name": "subSuite", "value": "AutoBuyMe"}, {"name": "host", "value": "LAPTOP-8H42P41J"}, {"name": "thread", "value": "19804-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "main_test"}]}